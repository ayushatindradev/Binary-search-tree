#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *left;
    Node *right;
    Node(int val)
    {
        data = val;
        left = NULL;
        right = NULL;
    }
};
bool searchBST(Node *root, int key)
{
    if (root == NULL)
    {
        return false;
    }
    if (root->data == key)
    {
        return true;
    }

    else if (root->data > key)
    {
        return searchBST(root->left, key);
    }
    else
    {
        return searchBST(root->right, key);
    }
    return false;
}
int findMin(Node *root)
{
    if (root == NULL)
    {
        return -1;
    }
    while (root->left != NULL)
    {
        root = root->left;
    }
    return root->data;
}
int findMax(Node *root)
{
    while (root->right != NULL)
    {
        root = root->right;
    }
    return root->data;
}
void inorder(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
int height(Node *root)
{
    if (root == NULL)
    {
        return -1;
    }
    return max(height(root->left), height(root->right) + 1);
}
int main()
{
    // // cout<<"Top easy questation BST"<<endl;
    // 1. What is a Binary Search Tree (BST)?
    // A binary search tree (BST) is a binary tree where :
    // The left subtree of the node contsians only nodes with valus smaller than the node's valus
    // the right subtree of the nodes constains only nodes with values greater than the nodes's values
    // the left and right subtree must also be bst

    // 2. What is the difference between a Binary Tree and a Binary Search Tree?
    // Binary Tree -> Any tree at most 2 childeren per node , no speacific order o(n) search completxity
    // BSt ->follow specific ordering rules
    // left<root<right
    // o(log n)->average cases
    // // 3. What are the properties of a BST?
    // left subtree < rootnode <right subtree nodes
    // inorder traversal gives sprted value
    // efficiet search minsertaion and deletion o(logn) in a balenced bst
    // 4. How do you search for an element in a BST?
    // Node* root = new Node(10);
    // root->left = new Node(5);
    // root->right = new Node(20);

    // cout << (searchBST(root, 5) ? "Found" : "Not Found") << endl;
    // cout << (searchBST(root, 15) ? "Found" : "Not Found") << endl;
    // 5. What is the time complexity of searching in a BST?
    // best -> o(log n)-> bst is balenced
    // worst -> o( n)-> bst is skewed
    // 6. How do you find the minimum value in a BST?
    // 7. How do you find the maximum value in a BST?
    // 8. What is an inorder traversal of a BST?
    // 9. What does an inorder traversal of a BST return?
    // A sorted list of elemsnt (because bst store values in increasing order).
    // 10. What is the height of a BST, and how is it calculated?
    // Time Complexity: O(N) (for unbalanced trees)
}
#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int d){
        data = d;
        left = NULL;
        right = NULL;
    }
};
Node* insert(Node* node,int target){
    if(node == NULL){
        Node * temp= new Node(target);
        return temp;
    }
    // 
    if(node->data > target){
        node->left = insert(node->left, target);
    }
    else{
        node->right = insert(node->right, target);
    }
    return node;
}

void inorder(Node* node){
    if(node == NULL){
        return;
    }
    inorder(node->left);
    cout<<node->data<<" ";
    inorder(node->right);
}
bool search(Node* node,int target){
    if(node == NULL){
        return false;
    }
    bool left= false;
    bool right = false;
    if(node->data == target){
        return true;  // Element found at the root node. Return true immediately to avoid unnecessary traversal.
    }
    if(node->data > target){
        left= search(node->left, target);
    }
    else if(node->data < target){
        right = search(node->right, target);
    }
   return right||left;
}
bool search1(Node* node,int target){
    if(node == NULL) return false;
    if(node->data == target){
        return true;
    }
    else if(node->data > target){
        return search1(node->left, target);
    }
    else{
        return search1(node->right, target);
    }

}
Node* minValueNode(Node* node){
    if(node == NULL) return NULL;
    while(node->left!= NULL){
        node = node->left;
    }
    return node;
}
Node* delete1(Node* root,int target){
    if(root == NULL) return NULL;
    // if the node is leaf, then delete the node then return NULL
    if(target <root->data){
        root->left = delete1(root->left, target);
    }
    else if(target > root->data){
        root->right = delete1(root->right, target);
    }
    else{
        if(root->left==NULL && root->right==NULL){
            delete root;
            root=NULL;
            return root;
          }
        // if the node is having the left child , the right  child will be is null then return the left child
          else if(root->right ==NULL && root->left->data != NULL){
            Node* temp = root->left;
            delete root;
            return temp;
          }
        //   if the node is having the right child , the the return the right child of the node 
          else if(root->left ==NULL && root->right != NULL){
            Node *temp = root->right;
            delete root;
            return temp;
          }
        //   if the node is having both the left and right children
        // then find the left highest child and then swap
        else if(root->left!=NULL && root->right!=NULL){
            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = delete1(root->right, temp->data);
        }
    }
  
return root;
}
Node* delete2(Node* root, int key){
    if(root ==NULL){
        return NULL;
    }
    if(root->data == key){
        // wahi 4 cases]
        if(root->left==NULL && root->right==NULL){
            delete root;
            root=NULL;
            return root;
          }
        // if the node is having the left child , the right  child will be is null then return the left child
          else if(root->right ==NULL && root->left->data != NULL){
            Node* temp = root->left;
            delete root;
            return temp;
          }
        //   if the node is having the right child , the the return the right child of the node 
          else if(root->left ==NULL && root->right != NULL){
            Node *temp = root->right;
            delete root;
            return temp;
          }
        //   if the node is having both the left and right children
        // then find the left highest child and then swap
        else if(root->left!=NULL && root->right!=NULL){
            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = delete1(root->right, temp->data);
        }

    }
    else if(root->data > key){
        return delete1(root->right, key);
    }
    else if(root->data<key){
        return delete1(root->left, key);
    }
    return root;
}
int main(){
    int arr[]={1,2,3,4,5,6,7,8,9,10};
    int n = sizeof(arr)/sizeof(arr[0]);
    Node* root = NULL;
    for(int i=0; i<n; i++){
        root = insert(root, arr[i]);
    }
    inorder(root);
    cout<<endl;
    delete2(root, 5);
    inorder(root);

    // inorder(root);
    // cout<<endl;
    // int target = 51;  // Change this value to search for a different element in the BST.
    // bool ans = search1(root,target);
    // if(!ans){
    //     cout<<"Element not found";
    // }
    // else{
    //     cout<<"Element found at index ";
    // }
    // 1Ô∏è‚É£ What is a Binary Search Tree (BST)?   
    // A bst us a special search tree(BST).
    // the left child is smaller than parent
    // the right chikd is greater than the parent.
    // The rule applies to all the nodes in the tree.
    
    // 2Ô∏è‚É£ How is a BST different from a normal Binary Tree?
    // in normal binary tree there are no rules about values are arranged.
    // In a BST, values follow left<parent<right.

//     3Ô∏è‚É£ What is the time complexity of searching for an element in a BST?
// best ->o(logn)
// worst->o(n)
// 4Ô∏è‚É£ What is the smallest element in a BST, and how do you find it?
// the left most nodes in the tree contains the smallest eleemnt.
// keep moving moving left untile you reach last node.

// 5Ô∏è‚É£ What is the largest element in a BST, and how do you find it?
// The rightmost node in he tree containes the largest eelement.
// keep moving right until you reach the last Node
// Simple Implementation Questions:
// if the tree empty , make the new node the root.
// if the value is ammler then root minsert it in the left.
// if the value is larger then root minsert it in the right.
// 7Ô∏è‚É£ How do you delete a node from a BST?
// no chid->simplely remove iter_swap
// one child ->> replace the node with its child 
// two childeren ? replace with smallest value in the riht subtree, than delete that value from the righy sbtree.
// 8Ô∏è‚É£ Write a function to find the height of a BST.
// int height(TreeNode* root){
//     if(root==NULL){
//         return -1;
//     }
//     return 1 + max(height(root->left), height(root->right));

// }
// 9Ô∏è‚É£ Write a function to search for a given key in a BST.
bool search(Node* root,int key){
    if(root==NULL){
        return false;
    }
    if(root->value==key){
        return true;
    }
    if(key<root->val){
        return search(root->left,key);
    }
    if(key> root->val){
        return search(root->right,key);
    }
}
// üîü Perform an inorder traversal of a BST. What does the output represent?
void inorder(TreeNode* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->val<<" ";
    inorder(root->right);
}
1Ô∏è‚É£ What is the full form of BST?
Binary search tree.
2Ô∏è‚É£ What is the main rule of a BST?
Leftchild<parent<rightchild
3Ô∏è‚É£ What is the root of a BST?
The topmost node in the tree.
4Ô∏è‚É£ What is a leaf node in a BST?
A node with no children.
5Ô∏è‚É£ How do you check if a tree is empty?
if the root is null ,the tree is empty
6Ô∏è‚É£ What is the time complexity of inserting an element in a BST?
Best case :o(logn)
worst case: o(n).
8Ô∏è‚É£ Which traversal of a BST gives a sorted list?
inorder traversal left root right
9Ô∏è‚É£ What are the three types of tree traversal?
preorder-> data , left , right
inorder->left , data, right
postorder->left , right ,data.
üîü What is the height of a single-node BST?
0(height is the number of edges from root to the farthesnt leaf.)
1Ô∏è‚É£1Ô∏è‚É£ How do you find the minimum value in a BST?
int findMin(Node* root){
    if(root == NULL){
        return -1;
    }
    while(root->left){
        root = root->left;
    }
    return root->value;
}
1Ô∏è‚É£2Ô∏è‚É£ How do you find the maximum value in a BST?
int findMax(Node* root){
    if(root == NULL){
        return -1;
    }
    while(root ->right){
        root = root->right;
    }
    return root->value;
// }

// 1Ô∏è‚É£3Ô∏è‚É£ What happens if you insert a duplicate value in a BST?
usually bst doest not allow duplicate values 
some implemenetation store suplicate sonth eright subtee.

1Ô∏è‚É£4Ô∏è‚É£ How do you check if a given tree is a BST?
bool isBST(TreeNOde* root,int minVal,int maxVal){
    if(root == NULL){
        return true;
    }
    if(root->val <=minVal || )
}
1Ô∏è‚É£5Ô∏è‚É£ What is a balanced BST?
A bst is bad_alloc if the height difrence betwen the left and right is at most 1 
1Ô∏è‚É£6Ô∏è‚É£ What is the worst-case height of a BST?
0(n)
1Ô∏è‚É£7Ô∏è‚É£ How do you convert a BST to a sorted array?
void inorder(TREEnode* root,vector<int> &arr){
    if(root ==NULL){
        return;
    }
    inorder(root->left,arr);
    arr.push_back(root->val);
    inorder(root->right,arr);
}
// 1Ô∏è‚É£8Ô∏è‚É£ What is a self-balancing BST?
// A bst that automatcailly adjust to stay balances
// avl ,red ,black tree.
// 1Ô∏è‚É£9Ô∏è‚É£ What is the depth of a node in a BST?
the number of edes from root to that node.
2Ô∏è‚É£0Ô∏è‚É£ How do you merge two BSTs?
convery both bst into sorted array , then merge them ans build a new bst 
1Ô∏è‚É£ What is BST?
A special tree where left <root< right
2Ô∏è‚É£ What does BST stand for?
binary search tree
3Ô∏è‚É£ What is the topmost node in a BST called?
Root node
4Ô∏è‚É£ What is a node in a BST?
Any sinle element in the tree
5Ô∏è‚É£ What is a leaf node?
A node with no childeren.
6Ô∏è‚É£ What is the left child in a BST?
A smallest values than parent node
7Ô∏è‚É£ What is the right child in a BST?
A largest value s than the parent.
8Ô∏è‚É£ What is the smallest value in a BST?
The leftmost node
9Ô∏è‚É£ What is the largest value in a BST?
the rightmost node
üîü How do you check if a tree is empty?
if(root ==NULL){
    then tree is empty
}
Time Complexity Questions
1Ô∏è‚É£1Ô∏è‚É£ What is the best-case time to find an element?
o(log n)
1Ô∏è‚É£2Ô∏è‚É£ What is the worst-case time to find an element?
o(n)->skew tree
1Ô∏è‚É£3Ô∏è‚É£ What is the time complexity of inserting an element?
o(log n)
1Ô∏è‚É£4Ô∏è‚É£ What is the time complexity of deleting an element?
log n

1Ô∏è‚É£5Ô∏è‚É£ Which is faster, BST or an array for searching?
BST (o(logn)  ) is fastrr than an unsorted array.
Insertion and Deletion Questions
id empty new node = root 
if(val<root) ->go left
if(val>root) ->go right
1Ô∏è‚É£7Ô∏è‚É£ Can BST have duplicate values?
Usally no , some , bst store duplicate on th right
1Ô∏è‚É£8Ô∏è‚É£ How do you delete a node in BST?
three cases 
no child -> delte node
one child-> replace with CHILD
two child -> replace with smaller form right subtrree

1Ô∏è‚É£9Ô∏è‚É£ What happens if you delete the root?
replace it with thee smlaler valie from the right subtrr
2Ô∏è‚É£0Ô∏è‚É£ How do you delete the smallest value in BST?
move left until the las(tnode and dlete 

Traversal Questions
2Ô∏è‚É£1Ô∏è‚É£ What is inorder traversal?
left,node,right
2Ô∏è‚É£2Ô∏è‚É£ What is preorder traversal?
root , left ,right
2Ô∏è‚É£3Ô∏è‚É£ What is postorder traversal?
left, right ,root
2Ô∏è‚É£4Ô∏è‚É£ Which traversal gives sorted values in BST?
inorder
2Ô∏è‚É£5Ô∏è‚É£ What is the time complexity of traversing a BST?
o(n)
2Ô∏è‚É£6Ô∏è‚É£ What is the height of a BST?
the longest path frmo root to left.
2Ô∏è‚É£7Ô∏è‚É£ What is the height of an empty BST?
-1
2Ô∏è‚É£8Ô∏è‚É£ What is the height of a BST with one node?
0
3Ô∏è‚É£0Ô∏è‚É£ What is the worst-case height of a BST?
o(
3Ô∏è‚É£1Ô∏è‚É£ How do you check if a tree is a BST?
  0(n)
  3Ô∏è‚É£1Ô∏è‚É£ How do you check if a tree is a BST?
  inorder traversal should be sorted.
  3Ô∏è‚É£2Ô∏è‚É£ What is a balanced BST?
a tree where left and right height differ at at most 1
3Ô∏è‚É£3Ô∏è‚É£ What is an unbalanced BST?
A tree where one side mush deeper than the other.
3Ô∏è‚É£4Ô∏è‚É£ What is the worst case of a BST?
A skewd tree(kinked list shape)
3Ô∏è‚É£5Ô∏è‚É£ What is a self-balancing BST?
a bst that keep itself balances(avl).
Other Simple Questions
3Ô∏è‚É£6Ô∏è‚É£ What is the difference between BST and Binary Tree?
bst follow order (left<root<right).
3Ô∏è‚É£7Ô∏è‚É£ What is the first value in a BST‚Äôs inorder traversal?
the smallest value.
3Ô∏è‚É£8Ô∏è‚É£ Can a BST have a cycle?
no bst do not have cycle.
3Ô∏è‚É£9Ô∏è‚É£ How do you merge two BSTs?
convert 
0(n)
1Ô∏è‚É£ What does BST stand for?
Binary search tree
2Ô∏è‚É£ What is the rule of a BST?
Left child< root <right 
3Ô∏è‚É£ What is the smallest value in a BST?
the leftmost node
4Ô∏è‚É£ What is the largest value in a BST?
the rightmost Node
5Ô∏è‚É£ Which traversal gives a sorted list in BST?
inorder traverslal
6Ô∏è‚É£ How do you check if a tree is empty?
if(root ==NULL){
    the treee is empty.
}
7Ô∏è‚É£ How do you insert a value in a BST?
if value is smaller go left , if larges go right 
8Ô∏è‚É£ What is the time complexity of searching in a BST?
o(long) and o(n) 
9Ô∏è‚É£ What is a leaf node in BST?
a node with no child
üîü What happens if you delete the root of a BST?
Replace it with smallest value from the right subtree.


}
