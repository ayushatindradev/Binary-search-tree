#include<iostream>
using namespace std;
class Node{
public:
    int data;
    Node* left;
    Node* right;
    Node(int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};
Node* insert(Node* root,int val){
    if(root == NULL){
        return new Node(val);
    }

    if(val<root->data){
        root->left = insert(root->left,val);    
    }
    else{
        root->right = insert(root->right,val);
    }
    return root;
}

bool search(Node* root,int key){
    if(root ==NULL){
        return false;
    }
    if(root->data == key){
        return true;
    }
    if(key<root->data){
        return search(root->left,key);
    }
    else{
        return search(root->right,key);
    }
    return false;

}
int findMin(Node* root){
    if(root == NULL){
        return -1;
    }
    while(root->left !=NULL){
        root = root->left;
    }
    return root->data;
}
int findMax(Node* root){
    if(root == NULL){
        return -1;
    }
    while(root->right!=NULL){
        root = root->right;
    }
    return root->data;
}
void inorder(Node* root){
    if(root == NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
int height(Node* root){
    if(root ==NULL){
        return 0;
    }
    return 1+max(height(root->left),height(root->right));
}
int countNodes(Node* root){
    if(root == NULL){
        return 0;
    }
    return 1+countNodes(root->left)+countNodes(root->right);
}
void printLeafNode(Node* root){
    if(root == NULL){
        return;
    }
    if(root->left == NULL && root->right == NULL){
        cout<<root->data<<" ";
        return;
    }
    printLeafNode(root->left);
    printLeafNode(root->right);

}
int sumOfNodes(Node* root){
    if(root == NULL){
        return 0;
    }
    return root->data + sumOfNodes(root->left)+sumOfNodes(root->right);
}
bool isIdentical(Node* root1,Node* root2){
    if(root1==NULL && root2==NULL){
        return true;
    }
    if(root1==NULL || root2==NULL){
        return false;
    }
    return (root1->data == root2->data 
}
int main(){

}
